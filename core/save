<?php

namespace App;

use Ratchet\MessageComponentInterface;
use Ratchet\ConnectionInterface;

use App\Database;
use App\Chatroom;

class ServerSocket implements MessageComponentInterface
{
    protected $clients;
    public $message;

    public $resource_id;
    protected $userChannels;

    public function __construct()
    {
        $this->clients = new \SplObjectStorage;
    }

    public function onOpen(ConnectionInterface $conn)
    {
        // Store the new connection to send messages to later
        $this->clients->attach($conn);
        $this->userChannels = [];


        echo "New connection! ({$conn->resourceId})\n";
    }

    public function onMessage(ConnectionInterface $from, $msg)
    {

        $data = json_decode($msg);

        switch ($data->type) {
            case 'private_message':
                # code...
                break;
            
            default:
                # code...
                break;
        }
  

        foreach ($this->clients as $client) {
            if ($from !== $client) {
                // The sender is not the receiver, send to each client connected
                if($client->resource == $receiver_reource_id){
                    $client->send(json_encode(['message' => $msg, 'from' => $this->resource_id]));
                }
                
            }
        }

    }

    public function getMessage()
    {
        return $this->message;
    }

    public function onClose(ConnectionInterface $conn)
    {
        // The connection is closed, remove it, as we can no longer send it messages
        $this->clients->detach($conn);

        echo "Connection {$conn->resourceId} has disconnected\n";
    }

    public function onError(ConnectionInterface $conn, \Exception $e)
    {
        echo "An error has occurred: {$e->getMessage()}\n";

        $conn->close();
    }
}
